service: slack-standup
frameworkVersion: '3'
provider:
  architecture: arm64
  lambdaHashingVersion: "20201221"
  name: aws
  runtime: nodejs14.x
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    stage: ${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  memorySize: 256
  logRetentionInDays: 5
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
    # https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.IAM.LambdaCreatePolicy.html
#    - Effect: "Allow"
#      Action:
#        - "lambda:InvokeFunction"
#      Resource:
#        Fn::Join:
#          - ':'
#          - - 'arn:aws:lambda'
#            - ${self:provider.region}
#            - Ref: 'AWS::AccountId'
#            - 'function'
#            - 'slack-standup-*'
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:secretsmanager'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'secret'
            - 'SlackStandup-secret-*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'table/*_STANDUP_STATUS'
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'table/*_STANDUP_STATUS/index/*'
resources:
  Resources:
    StatusDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "userId"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "userId-index"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.stage}_STANDUP_STATUS
        TimeToLiveSpecification:
          AttributeName: timeToLive
          Enabled: true
functions:
  slack:
    handler: src/app.handler
    warmup:
      officeHoursWarmer:
        enabled: true
      outOfOfficeHoursWarmer:
        enabled: true
    events:
      - http:
          path: slack/events
          method: post
  worker:
    handler: src/worker.handler
    warmup:
      officeHoursWarmer:
        enabled: true
      outOfOfficeHoursWarmer:
        enabled: true
    events:
      - http:
          path: worker/events
          method: post
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-express
  - serverless-plugin-warmup
package:
  excludeDevDependencies: true
  individually: true
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    #      forceExclude:
    #        - aws-sdk
    excludeFiles: src/**/*.test.js
  # Enable warmup on all functions
  warmup:
    officeHoursWarmer:
      enabled:
        - dev
        - prod
      events:
        - schedule: cron(0/4 11-2 ? * MON-FRI *)
      concurrency: 3
      verbose: true
      logRetentionInDays: 5
      memorySize: 128
      prewarm: true
    outOfOfficeHoursWarmer:
      enabled:
        - prod
      events:
        - schedule: cron(0/6 3-10 ? * MON-FRI *)
        - schedule: cron(0/6 * ? * SAT-SUN *)
      concurrency: 1
      verbose: false
      memorySize: 128