service: slack-standup
frameworkVersion: '3'
provider:
  architecture: arm64
  lambdaHashingVersion: "20201221"
  name: aws
  runtime: nodejs18.x
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    stage: ${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  memorySize: 256
  logRetentionInDays: 5
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:secretsmanager'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'secret'
            - 'SlackStandup-secret-*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'table/*_STANDUP_STATUS'
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - ${self:provider.region}
            - Ref: 'AWS::AccountId'
            - 'table/*_STANDUP_STATUS/index/*'
resources:
  Resources:
    StatusDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "userId"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "userId-index"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.stage}_STANDUP_STATUS
        TimeToLiveSpecification:
          AttributeName: timeToLive
          Enabled: true
functions:
  slack:
# -- enable these two lines for provisioned concurrency --
#    provisionedConcurrency: 1
#    concurrencyAutoscaling: ${self:custom.lambda.concurrencyAutoscaling}
# -- enable for warmer --
#     warmup:
#       default:
#         enabled: true
    handler: src/app.handler
    events:
      - http:
          path: slack/events
          method: post
    iamRoleStatementsInherit: true
    layers: ${self:custom.secrets-lambda-arns.${self:custom.region}}
    tracing: Active
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-express
  # -- enable for provisioned concurrency --
  # - serverless-provisioned-concurrency-autoscaling
  # -- enable for warmup lambda --
  # - serverless-plugin-warmup
  - serverless-iam-roles-per-function
package:
  excludeDevDependencies: true
  individually: true
custom:
  region: "${opt:region, self:provider.region}"
  secrets-lambda-arns:
    us-east-1: arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    us-east-2: arn:aws:lambda:us-east-2:590474943231:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    us-west-1: arn:aws:lambda:us-west-1:997803712105:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:1
    us-west-2: arn:aws:lambda:us-west-2:345057560386:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    excludeFiles: src/**/*.test.js
  # -- enable for provisioned concurrency --
  # lambda:
  #   concurrencyAutoscaling:
  #     enabled: true
  #     maximum: 1
  #     minimum: 1
  #     scheduledActions:
  #       - name: OpenOfficeTime
  #         timezone: "America/Denver"
  #         schedule: "cron(0 5 ? * MON-FRI *)"
  #         action:
  #           maximum: 1
  #           minimum: 1
  #       - name: CloseOfficeTime
  #         timezone: "America/Denver"
  #         schedule: "cron(0 21 ? * MON-FRI *)"
  #         action:
  #           maximum: 0
  #           minimum: 0
# -- enable for warmup lambda --  
#   warmup:
#     default:
#       events:
#         - schedule: rate(4 minutes)
#       enabled:
#         - prod
#       concurrency: 1
#       verbose: false
#       memorySize: 128
# # -- fine-tuned warmup --
# #      events:
#         # 4-11:59 UTC is 9pm - 4:59am MST
# #        - schedule: cron(0/5 4-11 ? * MON-FRI *)
# #        - schedule: cron(0/5 * ? * SAT-SUN *)